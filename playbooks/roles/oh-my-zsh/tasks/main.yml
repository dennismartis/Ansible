---
# tasks file for oh-my-zsh
- name: Clone the repository
  become: no
  # command: git clone https://github.com/robbyrussell/oh-my-zsh.git /home/user/.oh-my-zsh
  git:
    dest: /home/user/.oh-my-zsh
    repo: https://github.com/robbyrussell/oh-my-zsh.git


- name: Replace .zshrc
  become: no
  copy:
      dest: /home/user/.zshrc # required. Remote absolute path where the file should be copied to. If I(src) is a directory, this must be a directory too. If I(dest) is a nonexistent path and if either I(dest) ends with "/" or I(src) is a directory, I(dest) is created. If I(src) and I(dest) are files, the parent directory of I(dest) isn't created: the task fails if it doesn't already exist.
      # content: undefined # not required. When used instead of I(src), sets the contents of a file directly to the specified value. For anything advanced or with formatting also look at the template module.
      # selevel: s0 # not required. Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser).
      # force: yes # not required. the default is C(yes), which will replace the remote file when contents are different than the source. If C(no), the file will only be transferred if the destination does not exist.
      # unsafe_writes: false # not required. Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner.,This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption.
      # backup: yes # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      remote_src: yes # not required. If C(no), it will search for I(src) at originating/master machine.,If C(yes) it will go to the remote/target machine for the I(src). Default is C(no).,Currently I(remote_src) does not support recursive copying.
      # directory_mode: undefined # not required. When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed.
      # setype: null # not required. Type part of SELinux file context, C(_default) feature works as for I(seuser).
      # decrypt: Yes # not required. This option controls the autodecryption of source files using vault.
      src: /home/user/.oh-my-zsh/templates/zshrc.zsh-template # not required. Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.
      # mode: null # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like C(0644) or C(01777)). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
      # owner: user # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      # validate: None # not required. The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work.
      # attributes: None # not required. Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).
      # seuser: null # not required. User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.
      # checksum: undefined # not required. SHA1 checksum of the file being transferred. Used to valdiate that the copy of the file was successful.,If this is not provided, ansible will use the local calculated checksum of the src file.
      # local_follow: yes # not required. This flag indicates that filesystem links in the source tree, if they exist, should be followed.
      # serole: null # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
      # group: null # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      # follow: no # not required. This flag indicates that filesystem links in the destination, if they exist, should be followed.

- name: Set zsh as default shell
  user: 
    name: user
    shell: /bin/zsh