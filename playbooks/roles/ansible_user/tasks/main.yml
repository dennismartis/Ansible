---
# tasks file for ansible_user
- name: Create random password for ansible user
  shell: pwgen 16 -1s
      # free_form: "passwd=$(tr -d -c 'a-zA-Z0-9' < /dev/urandom | head -c 20)" # required. The shell module takes a free form command to run, as a string.  There's not an actual option named "free form".  See the examples!
    # free_form:  # required. The shell module takes a free form command to run, as a string.  There's not an actual option named "free form".  See the examples!
  register: new_password

- debug:
    var: new_password.stdout # not required. A variable name to debug.  Mutually exclusive with the 'msg' option.
- name: Create Ansible user
  user:
      name: ansible # required. Name of the user to create, remove or modify.
      password: "{{ passwords.linuxacademy }}" #{{ new_password.stdout }}" not required. Optionally set the user's password to this crypted value.  See the user example in the github examples directory for what this looks like in a playbook. See U(http://docs.ansible.com/ansible/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module) for details on various ways to generate these password values. Note on Darwin system, this value has to be cleartext. Beware of security issues.
      generate_ssh_key: yes # not required. Whether to generate a SSH key for the user in question. This will B(not) overwrite an existing SSH key.
      update_password: always # not required. choices: always;on_create. C(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users.
      comment: Ansible user # not required. Optionally sets the description (aka I(GECOS)) of user account.
      state: present
      shell: /bin/bash

- name: Add Ansible user to sudoers file (no password)
  lineinfile:
      path: /tmp/testfile # required. The file to modify.,Before 2.3 this option was only usable as I(dest), I(destfile) and I(name).
      #regexp: ^root # not required. The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found. Only the last line found will be replaced. For C(state=absent), the pattern of the line(s) to remove. Uses Python regular expressions. See U(http://docs.python.org/2/library/re.html).
      insertafter: ^root # not required. choices: EOF;*regex*. Used with C(state=present). If specified, the line will be inserted after the last match of specified regular expression. If the first match is required, use(firstmatch=yes). A special value is available; C(EOF) for inserting the line at the end of the file. If specified regular expression has no matches, EOF will be used instead. May not be used with C(backrefs).
      backup: yes # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      serole: null # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
      owner: root # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      mode: 0600 # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like C(0644) or C(01777)). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
      state: present # not required. choices: absent;present. Whether the line should be there or not.
      group: root # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      line: "ansible ALL=(ALL)       NOPASSWD:ALL" # not required. Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.